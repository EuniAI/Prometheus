name: Thank stargazer

on:
  watch:
    types: [started]   # Fires when someone stars the repo

permissions:
  contents: write      # To commit STARGAZERS.md
  issues: write        # To open/comment on the thanks issue

jobs:
  thank:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare environment
        id: prep
        run: |
          echo "ACTOR=${{ github.actor }}" >> $GITHUB_OUTPUT
          echo "DATE=$(date -u +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "REPO_SLUG=${{ github.repository }}" >> $GITHUB_OUTPUT

      - name: Append stargazer to STARGAZERS.md (if new)
        run: |
          FILE="STARGAZERS.md"
          if [ ! -f "$FILE" ]; then
            cat > "$FILE" <<'EOF'
# üåü STARGAZERS

Thanks to everyone who starred **<OWNER>/<REPO>**!
(Automatically updated when someone stars the repository.)

<!-- New entries are appended below. -->
EOF
          fi

          # Append only if not already present
          if ! grep -q "(https://github.com/${{ steps.prep.outputs.ACTOR }})" "$FILE"; then
            echo "- [${{ steps.prep.outputs.ACTOR }}](https://github.com/${{ steps.prep.outputs.ACTOR }}) ‚Äî ${{ steps.prep.outputs.DATE }}" >> "$FILE"
          fi

      - name: Commit & push changes (if any)
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add STARGAZERS.md
          git commit -m "chore: add stargazer ${{ steps.prep.outputs.ACTOR }}" || exit 0
          git push

      - name: Ensure the 'Thanks' issue exists, then comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const ISSUE_TITLE = "üôè Thanks to all stargazers";
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Find or create the issue
            const { data: issues } = await github.rest.issues.listForRepo({
              owner, repo, state: "open", per_page: 100
            });
            let issue = issues.find(i => i.title === ISSUE_TITLE);

            if (!issue) {
              const created = await github.rest.issues.create({
                owner, repo,
                title: ISSUE_TITLE,
                body: [
                  "This issue automatically thanks everyone who stars the repository.",
                  "",
                  "Welcome aboard! üéâ"
                ].join("\n")
              });
              issue = created.data;
            }

            // Post a thank-you comment for this star event
            const actor = context.actor;
            // Avoid thanking GitHub system/bot accounts (rare for star events, but cheap to guard)
            const ignore = ["github-actions[bot]", "dependabot[bot]"];
            if (!ignore.includes(actor)) {
              await github.rest.issues.createComment({
                owner, repo, issue_number: issue.number,
                body: `‚≠ê Thanks, @${actor}, for starring the repo!`
              });
            }
