import logging
import threading
from typing import Dict

from langchain_core.language_models.chat_models import BaseChatModel
from langchain_core.messages import HumanMessage, SystemMessage

from prometheus.utils.issue_util import format_issue_info


class IssueBugResponderNode:
    SYS_PROMPT = """\
You are the final agent in a multi-agent bug fixing system. Users report issues on GitHub/GitLab, and our system works to fix them. 
Your role is to compose the response that will be posted back to the issue thread.

The information you receive is structured as follows:
- Issue Information (from user): The original issue title, body, and any user comments
- Edit agent response: Generated by our edit agent after editing the source code
- Patch: Created by our fix generation agent to resolve the issue
- Verification: Results from our testing agent confirming the fix works

Write a clear, professional response that will be posted directly as a comment. Your response should:
- Be concise yet informative
- Use a professional and friendly tone appropriate for open source communication
- Reference the system's understanding of the issue (from Edit agent response)
- Explain the implemented solution (from patch)
- Include the successful verification results

Avoid:
- Mentioning that you are an AI or part of an automated system
- Using overly formal or robotic language
- Making assumptions beyond what our agents have provided
- Promising future fixes or making commitments

Format your response as a properly structured comment.
"""

    HUMAN_PROMPT = """\
{issue_info}

Generated patch:
{edit_patch}

Verification:
{verification}
"""

    def __init__(self, model: BaseChatModel):
        self.system_prompt = SystemMessage(self.SYS_PROMPT)
        self.model = model

        self._logger = logging.getLogger(
            f"thread-{threading.get_ident()}.prometheus.lang_graph.nodes.issue_bug_responder_node"
        )

    def format_human_message(self, state: Dict) -> HumanMessage:
        verification_messages = []

        # We only report successful verifications that were performed
        if state["passed_reproducing_test"]:
            verification_messages.append("✓ The bug reproducing test passed")

        if state["passed_build"]:
            verification_messages.append("✓ Build passes successfully")

        if state["passed_existing_test"]:
            verification_messages.append("✓ All existing tests pass successfully")

        verification_summary = "\n".join(verification_messages)

        formatted_message = self.HUMAN_PROMPT.format(
            issue_info=format_issue_info(
                state["issue_title"], state["issue_body"], state["issue_comments"]
            ),
            edit_patch=state["edit_patch"],
            verification=verification_summary,
        )

        return HumanMessage(content=formatted_message)

    def __call__(self, state: Dict):
        messages = [
            self.system_prompt,
            self.format_human_message(state),
        ]
        response = self.model.invoke(messages)
        self._logger.debug(response)
        return {"issue_response": response.content}
