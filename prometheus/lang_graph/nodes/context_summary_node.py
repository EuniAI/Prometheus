"""Context summarization for codebase-related queries and debugging.

This module implements a specialized assistant that organizes and summarize all the
KnowledgeGraph traversal context into a single summary.
"""

import logging
from typing import Sequence

from langchain_core.language_models.chat_models import BaseChatModel
from langchain_core.messages import AIMessage, BaseMessage, HumanMessage, SystemMessage, ToolMessage

from prometheus.lang_graph.subgraphs.context_provider_state import ContextProviderState


class ContextSummaryNode:
  """Organizes and presents comprehensive code context for debugging and understanding.

  This class processes and structures code-related context retrieved from knowledge
  graph searches, maintaining complete technical details while organizing information
  in relevance layers. It preserves all potentially relevant information including
  implementation details, configurations, and documentation.
  """

  SYS_PROMPT = """\
You are a specialized assistant that organizes retrieved code-related context from a knowledge graph. Your role is to preserve and structure ALL relevant technical information without analysis or suggestions.

CORE PRINCIPLES:
1. Preserve ALL potentially relevant information:
   - Complete code implementations
   - Full error messages and stack traces
   - Configuration details
   - Test cases and results
   - Documentation and comments
   - File paths and line numbers

2. Organize context by relevance:
   PRIMARY:
   - Direct code matches
   - Exact error locations
   - Explicit issue-related implementations

   SECONDARY:
   - Supporting code (parent classes, utilities)
   - Related configurations
   - Relevant tests

   TERTIARY:
   - Similar implementations
   - Related modules
   - Environmental context

3. Technical Detail Requirements:
   - Keep exact file paths and line numbers
   - Preserve complete function/method signatures
   - Maintain full error messages
   - Include complete configuration blocks
   - Show full test cases
   - Keep all version information

OUTPUT FORMAT:
1. Primary Context
   ```
   File: path/to/file.py:line_range
   [COMPLETE CODE BLOCK]
   ```

2. Supporting Context
   ```
   File: path/to/support.py:line_range
   [COMPLETE CODE BLOCK]
   ```

3. Configuration & Environment
   ```
   File: path/to/config.yaml:line_range
   [COMPLETE CONFIG]
   ```

DO NOT:
- Suggest fixes or improvements
- Analyze code patterns
- Remove any technical details
- Truncate implementations
- Add implementation suggestions
- Propose next steps
- Make assumptions about code
- Offer debugging advice

REMEMBER:
- You only organize and preserve context
- Never add analysis or suggestions
- Keep ALL technical details intact
- Focus solely on presenting found information
- Maintain exact technical precision
  """

  HUMAN_PROMPT = """\
The user query is: {query}

The retrieved context from another agent:
{context}
"""

  def __init__(self, model: BaseChatModel):
    """Initializes the ContextSummaryNode with a language model.

    Sets up the context summarizer with the necessary system prompts and
    logging configuration for processing retrieved context.

    Args:
      model: Language model instance that will be used for organizing and
        structuring context. Must be a BaseChatModel implementation
        suitable for detailed text processing and organization.
    """
    self.system_prompt = SystemMessage(self.SYS_PROMPT)
    self.model = model

    self._logger = logging.getLogger("prometheus.lang_graph.nodes.context_summary_node")

  def format_messages(self, context_messages: Sequence[BaseMessage]):
    """Formats a sequence of messages into a structured list.

    Converts different types of messages (Human, AI, Tool) into a consistently
    formatted list of strings, preserving the message source and content.

    Args:
      context_messages: Sequence of BaseMessage instances to be formatted.
        Can include HumanMessage, AIMessage, and ToolMessage types.

    Returns:
      List of formatted message strings, each prefixed with its source type.
    """
    formatted_messages = []
    for message in context_messages:
      if isinstance(message, HumanMessage):
        formatted_messages.append(f"Human message: {message.content}")
      elif isinstance(message, AIMessage):
        formatted_messages.append(f"Assistant message: {message.content}")
      elif isinstance(message, ToolMessage):
        formatted_messages.append(f"Tool message: {message.content}")
    return formatted_messages

  def format_human_message(self, query: str, context_messages: Sequence[BaseMessage]):
    """Creates a formatted message combining query and context.

    Combines the user query with formatted context messages into a single
    structured message for the language model.

    Args:
      query: User's original query string.
      context_messages: context_message generated by ContextProviderNode.

    Returns:
      HumanMessage instance containing the formatted query and context.
    """
    formatted_context_messages = self.format_messages(context_messages)
    human_message = HumanMessage(
      self.HUMAN_PROMPT.format(query=query, context="\n".join(formatted_context_messages))
    )
    return human_message

  def __call__(self, state: ContextProviderState):
    """Processes context state to generate organized summary.

    Takes the current context state, formats it into messages for the
    language model, and generates a comprehensive, well-structured
    summary of all relevant information.

    Args:
      state: Current state containing query and context messages.

    Returns:
      Dictionary that updates the state with the structured summary.
    """
    message_history = [
      self.system_prompt,
      self.format_human_message(state["query"], state["context_messages"]),
    ]
    response = self.model.invoke(message_history)
    self._logger.debug(f"ContextSummaryNode response:\n{response}")
    return {"summary": response.content}
