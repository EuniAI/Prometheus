"""Context summarization for codebase-related queries and debugging.

This module implements a specialized assistant that organizes and summarize all the
KnowledgeGraph traversal context into a single summary.
"""

import logging
from typing import Sequence

from langchain_core.language_models.chat_models import BaseChatModel
from langchain_core.messages import AIMessage, BaseMessage, HumanMessage, SystemMessage, ToolMessage

from prometheus.lang_graph.subgraphs.context_provider_state import ContextProviderState


class ContextSummaryNode:
  """Organizes and presents comprehensive code context for debugging and understanding.

  This class processes and structures code-related context retrieved from knowledge
  graph searches, maintaining complete technical details while organizing information
  in relevance layers. It preserves all potentially relevant information including
  implementation details, configurations, and documentation.
  """

  SYS_PROMPT = """\
You are a specialized assistant that organizes code-related context discovered through knowledge graph traversal. Your role is to identify the most query-relevant discoveries and present them with complete detail, explaining their significance to the query.

CORE RESPONSIBILITIES:
1. Select Relevant Context:
   - Identify discoveries that directly relate to the query
   - Include supporting content necessary for understanding
   - Filter out unrelated or tangential content
   - Maintain essential relationships between selected content

2. Preserve Selected Content Completely:
   - Keep full content of chosen elements
   - Maintain exact file paths
   - Preserve all formatting and structure
   - Include complete definitions and documentation
   - Keep any related imports or dependencies

3. Establish Query Relevance:
   - Explain how each preserved element answers the query
   - Show relationships between preserved elements
   - Highlight key parts that match query intent
   - Describe how elements work together

OUTPUT STRUCTURE:
1. Selected Context Overview
   Brief explanation of why these elements were chosen

2. Query-Relevant Elements
   ```
   Source: path/to/file.py
   Relevance: [Clear explanation of how this relates to the query]

   [COMPLETE CONTENT]
   ```

CRITICAL REQUIREMENTS:
- Only preserve relevant content
- Keep selected content complete and unmodified
- Clearly explain query relevance
- Maintain exact source locations
- Show relationships between chosen elements

DO NOT:
- Truncate selected content
- Include irrelevant discoveries
- Modify or rewrite content
- Make implementation suggestions
- Add analysis or improvements
- Summarize code or documentation

REMEMBER:
- Be selective but thorough
- Everything preserved should connect to the query
- Chosen content must be kept complete
- Clear relevance explanation is crucial
  """

  HUMAN_PROMPT = """\
The user query is: {query}

The retrieved context from another agent:
{context}
"""

  def __init__(self, model: BaseChatModel):
    """Initializes the ContextSummaryNode with a language model.

    Sets up the context summarizer with the necessary system prompts and
    logging configuration for processing retrieved context.

    Args:
      model: Language model instance that will be used for organizing and
        structuring context. Must be a BaseChatModel implementation
        suitable for detailed text processing and organization.
    """
    self.system_prompt = SystemMessage(self.SYS_PROMPT)
    self.model = model

    self._logger = logging.getLogger("prometheus.lang_graph.nodes.context_summary_node")

  def format_messages(self, context_messages: Sequence[BaseMessage]):
    """Formats a sequence of messages into a structured list.

    Converts different types of messages (Human, AI, Tool) into a consistently
    formatted list of strings, preserving the message source and content.

    Args:
      context_messages: Sequence of BaseMessage instances to be formatted.
        Can include HumanMessage, AIMessage, and ToolMessage types.

    Returns:
      List of formatted message strings, each prefixed with its source type.
    """
    formatted_messages = []
    for message in context_messages:
      if isinstance(message, HumanMessage):
        formatted_messages.append(f"Human message: {message.content}")
      elif isinstance(message, AIMessage):
        formatted_messages.append(f"Assistant message: {message.content}")
      elif isinstance(message, ToolMessage):
        formatted_messages.append(f"Tool message: {message.content}")
    return formatted_messages

  def format_human_message(self, query: str, context_messages: Sequence[BaseMessage]):
    """Creates a formatted message combining query and context.

    Combines the user query with formatted context messages into a single
    structured message for the language model.

    Args:
      query: User's original query string.
      context_messages: context_message generated by ContextProviderNode.

    Returns:
      HumanMessage instance containing the formatted query and context.
    """
    formatted_context_messages = self.format_messages(context_messages)
    human_message = HumanMessage(
      self.HUMAN_PROMPT.format(query=query, context="\n".join(formatted_context_messages))
    )
    return human_message

  def __call__(self, state: ContextProviderState):
    """Processes context state to generate organized summary.

    Takes the current context state, formats it into messages for the
    language model, and generates a comprehensive, well-structured
    summary of all relevant information.

    Args:
      state: Current state containing query and context messages.

    Returns:
      Dictionary that updates the state with the structured summary.
    """
    message_history = [
      self.system_prompt,
      self.format_human_message(state["query"], state["context_messages"]),
    ]
    response = self.model.invoke(message_history)
    self._logger.debug(f"ContextSummaryNode response:\n{response}")
    return {"summary": response.content}
