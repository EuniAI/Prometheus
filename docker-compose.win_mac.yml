networks:
  prometheus_network:
    driver: bridge

services:
  neo4j:
    image: neo4j:5.20.0
    container_name: neo4j_container
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["apoc"]
    networks:
      - prometheus_network
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - ./data_neo4j:/data
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "--non-interactive", "RETURN 1;"]
      interval: 15s
      timeout: 30s
      retries: 3


  postgres:
    image: postgres
    container_name: postgres_container
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgres
    networks:
      - prometheus_network
    ports:
      - "5432:5432"
    volumes:
      - ./data_postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 15s
      timeout: 30s
      retries: 3

  prometheus:
    build: .
    container_name: prometheus
    ports:
      - "8000:8000"
    environment:
      - PROMETHEUS_LOGGING_LEVEL="DEBUG"
      - PROMETHEUS_NEO4J_URI="bolt://neo4j:7687"
      - PROMETHEUS_NEO4J_USERNAME=neo4j
      - PROMETHEUS_NEO4J_PASSWORD=password
      - PROMETHEUS_NEO4J_BATCH_SIZE=1000
      - PROMETHEUS_KNOWLEDGE_GRAPH_MAX_AST_DEPTH=5
      - PROMETHEUS_LITELLM_MODEL=${PROMETHEUS_LITELLM_MODEL}
      - PROMETHEUS_LITELLM_ANTHROPIC_API_KEY=${PROMETHEUS_LITELLM_ANTHROPIC_API_KEY}
      - PROMETHEUS_LITELLM_GEMINI_API_KEY=${PROMETHEUS_LITELLM_GEMINI_API_KEY}
      - PROMETHEUS_WORKING_DIRECTORY="/app/working_dir"
      - PROMETHEUS_GITHUB_ACCESS_TOKEN=${PROMETHEUS_GITHUB_ACCESS_TOKEN}
      - PROMETHEUS_POSTGRES_URI="postgresql://postgres:password@postgres:5432/postgres?sslmode=disable"
    networks:
      - prometheus_network
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy